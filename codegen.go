package main

import (
	"bytes"
	"fmt"
	"go/format"
	"strings"
	"text/template"

	"github.com/pkg/errors"
	"github.com/serenize/snaker"
)

const codeTemplate = `// Code generated by github.com/go-joe/gen-reactions DO NOT EDIT.

// Package reactions contains a list of generated reactions that are widely used
// in different chat applications on the internet.
package reactions

// A Reaction is an emoji that is attached to chat messages.
type Reaction struct {
	Raw       string	
	Shortcode string
}
{{ range .Groups }}
// {{ .Name }} emojis.
var (
{{- range .Emojis }}
	{{ camel_case .Name }} = Reaction{Raw: "{{ .Code }}", Shortcode: "{{ .Name }}"}
{{- end }}
)
{{ end }}
// String returns the UTF string value of the Reaction (e.g. üëç).
func (r Reaction) String() string {
	if r.Raw != "" {
		return r.Raw
	}

	return r.Shortcode
}
`

func generateCode(emojis []*EmojiGroup) error {
	replacer := strings.NewReplacer(
		"+", "Plus",
		"-", "Minus",
		"0", "Zero",
		"1", "One",
		"2", "Two",
		"3", "Three",
		"4", "Four",
		"5", "Five",
		"6", "Six",
		"7", "Seven",
		"8", "Eight",
		"9", "Nine",
	)

	tmpl := template.New("reactions.go")
	tmpl.Funcs(template.FuncMap{
		"camel_case": func(name string) string {
			name = replacer.Replace(name)
			return snaker.SnakeToCamel(name)
		},
	})

	tmpl, err := tmpl.Parse(codeTemplate)
	if err != nil {
		return errors.Wrap(err, "failed to parse template")
	}

	type vars struct {
		Groups []*EmojiGroup
	}

	generated := new(bytes.Buffer)
	err = tmpl.Execute(generated, vars{Groups: emojis})
	if err != nil {
		return errors.Wrap(err, "failed to execute template")
	}

	formatted, err := format.Source(generated.Bytes())
	if err != nil {
		return errors.Wrap(err, "failed to format generated code")
	}

	_, err = fmt.Println(string(formatted))
	if err != nil {
		return errors.Wrap(err, "failed to print output")
	}

	return nil
}
